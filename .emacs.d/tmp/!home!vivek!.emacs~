

;; (custom-set-variables
;;  ;; custom-set-variables was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(cua-mode t nil (cua-base))

;;  '(inhibit-startup-screen t))
;; (custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(default ((t (:family "Hack" :foundry "unknown" :slant normal :weight normal :height 98 :width normal)))))

;; (when (>= emacs-major-version 24)
;;   (require 'package)
;;   (add-to-list
;;    'package-archives
;;    '("melpa" . "http://melpa.org/packages/") t)
;;   (package-initialize))

;; (load-theme 'gruvbox t)
;; ; (load-theme 'base16-tomorrow-dark t)

;; (require 'multiple-cursors)

;; (defun comment-or-uncomment-region-or-line ()
;;     "Comments or uncomments the region or the current line if there's no active region."
;;     (interactive)
;;     (let (beg end)
;;         (if (region-active-p)
;;             (setq beg (region-beginning) end (region-end))
;;             (setq beg (line-beginning-position) end (line-end-position)))
;;         (comment-or-uncomment-region beg end)))

;; (global-set-key (kbd "C-/") 'comment-or-uncomment-region-or-line)

;; (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;; (global-set-key (kbd "C->") 'mc/mark-next-like-this)
;; (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
;; (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;; (setq c-default-style "linux"
;;       c-basic-offset 4)

;; (global-linum-mode t)
;; (setq linum-format "%4d \u2502 ")


;; (defun move-text-internal (arg)
;;   (cond
;;    ((and mark-active transient-mark-mode)
;;     (if (> (point) (mark))
;; 	(exchange-point-and-mark))
;;     (let ((column (current-column))
;; 	  (text (delete-and-extract-region (point) (mark))))
;;       (forward-line arg)
;;       (move-to-column column t)
;;       (set-mark (point))
;;       (insert text)
;;       (exchange-point-and-mark)
;;       (setq deactivate-mark nil)))
;;    (t
;;     (beginning-of-line)
;;     (when (or (> arg 0) (not (bobp)))
;;       (forward-line)
;;       (when (or (< arg 0) (not (eobp)))
;; 	(transpose-lines arg))
;;       (forward-line -1)))))

;; (defun move-text-down (arg)
;;   "Move region (transient-mark-mode active) or current line
;;  arg lines down."
;;   (interactive "*p")
;;   (move-text-internal arg))

;; (defun move-text-up (arg)
;;   "Move region (transient-mark-mode active) or current line
;;  arg lines up."
;;   (interactive "*p")
;;   (move-text-internal (- arg)))

;; (global-set-key [\M-up] 'move-text-up)
;; (global-set-key [\M-down] 'move-text-down)

;; (defun my-c-mode-hook ()
;;   (setq comment-start "//")
;;   (setq comment-end ""))
;; (add-hook 'c-mode-hook 'my-c-mode-hook)

;; (set-face-attribute 'default nil :height 100)

;; (global-visual-line-mode t)

;; ;; predictive install location
;; (add-to-list 'load-path "~/.emacs.d/predictive/")
;; ;; dictionary locations
;; (add-to-list 'load-path "~/.emacs.d/predictive/latex/")
;; (add-to-list 'load-path "~/.emacs.d/predictive/texinfo/")
;; (add-to-list 'load-path "~/.emacs.d/predictive/html/")
;; ;; load predictive package
;; (autoload 'predictive-mode "~/.emacs.d/predictive/predictive"
;;   "Turn on Predictive Completion Mode." t)

;; (require 'redo+)
;; (global-set-key [(control z)] 'undo)
;; (global-set-key [(control shift z)] 'redo)

;; (global-set-key [(control a)] 'mark-whole-buffer)

;; ;; (add-to-list 'load-path "~/.emacs.d/ergoemacs-mode")
;; ;; (require 'ergoemacs-mode)

;; ;; (add-hook 'LaTeX-mode-hook 'predictive-mode)

;; ;; (setq completion-ui-use-dynamic nil)
;; ;; (setq completion-ui-use-echo nil)
;; ;; (setq completion-auto-show nil)
;; ;; (setq completion-auto-show-delay '(global . 4))
;; ;; (setq completion-use-hotkeys nil)

;; ;; (global-set-key [\C-tab] 'completion-show-popup-tip)

;; ;; (add-to-list 'auto-mode-alist '("\\.tex$" . TeX-latex-mode))

;; ;; (electric-pair-mode 1)

;; ;; (add-to-list 'load-path "~/.emacs.d/elpa/hindent-20151113.24")
;; ;; (require 'hindent)
;; ;; (add-hook 'haskell-mode-hook #'hindent-mode)








;; here

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background "#111111" :foreground "#ffffff" :height 90 :family "Liberation Mono"))))
 '(ac-candidate-face ((t (:background "black" :foreground "white"))))
 '(ac-clang-candidate-face ((t (:background "black" :foreground "white"))))
 '(ac-clang-selection-face ((t (:background "red" :foreground "white"))))
 '(css-property ((t (:inherit font-lock-type-face))))
 '(css-selector ((t (:inherit font-lock-keyword-face))))
 '(ediff-current-diff-A ((t (:background "#cd5c5c" :foreground "#fef989" :weight bold))))
 '(ediff-current-diff-Ancestor ((t (:background "#cd5c5c" :foreground "#877391" :weight bold))))
 '(ediff-current-diff-B ((t (:background "#cd5c5c" :foreground "#4a8bcb" :weight bold))))
 '(ediff-current-diff-C ((t (:background "#cd5c5c" :foreground "#3ea848" :weight bold))))
 '(ediff-even-diff-A ((t (:foreground "#fef989"))))
 '(ediff-even-diff-Ancestor ((t (:foreground "#877391"))))
 '(ediff-even-diff-B ((t (:foreground "#4a8bcb"))))
 '(ediff-even-diff-C ((t (:foreground "#3ea848"))))
 '(ediff-fine-diff-A ((t (:background "#fefaa2" :foreground "black"))))
 '(ediff-fine-diff-Ancestor ((t (:background "#af93ba" :foreground "black"))))
 '(ediff-fine-diff-B ((t (:background "#77aadd" :foreground "black"))))
 '(ediff-fine-diff-C ((t (:background "#5ccd6b" :foreground "black"))))
 '(ediff-odd-diff-A ((t (:background "#282828" :foreground "#fef989"))))
 '(ediff-odd-diff-Ancestor ((t (:background "#282828" :foreground "#877391"))))
 '(ediff-odd-diff-B ((t (:background "#282828" :foreground "#4a8bcb"))))
 '(ediff-odd-diff-C ((t (:background "#282828" :foreground "#3ea848"))))
 '(error ((t (:background "#ff2222"))))
 '(font-lock-comment-face ((t (:foreground "#888888"))))
 '(font-lock-constant-face ((t (:foreground "#bbbb00"))))
 '(font-lock-function-name-face ((t nil)))
 '(font-lock-keyword-face ((t (:foreground "#d98e36" :weight bold))))
 '(font-lock-preprocessor-face ((t (:foreground "#3db03d" :slant italic))))
 '(font-lock-string-face ((t (:foreground "#cd5c5c"))))
 '(font-lock-type-face ((t (:foreground "#5588ff"))))
 '(font-lock-variable-name-face ((t nil)))
 '(fringe ((t (:inherit linum))))
 '(highlight ((t (:background "#202020"))))
 '(linum ((t (:inherit default :foreground "#888888"))))
 '(match ((t (:background "#ff0000"))))
 '(minibuffer-prompt ((t (:foreground "#77aadd"))))
 '(mode-line ((t (:background "#222222"))))
 '(mode-line-buffer-id ((t (:weight bold))))
 '(mode-line-highlight ((t (:background "#4a8bcb" :foreground "#ffffff"))))
 '(mode-line-inactive ((t (:inherit mode-line :foreground "#888888"))))
 '(popup-scroll-bar-background-face ((t (:background "black"))))
 '(popup-scroll-bar-foreground-face ((t (:background "#444444"))))
 '(popup-tip-face ((t (:background "black" :foreground "yellow"))))
 '(region ((t (:background "#1e3d4c"))))
 '(show-paren-match ((t (:background "#555555"))))
 '(show-paren-mismatch ((t (:background "#552222"))))
 '(which-func ((t (:inherit mode-line :weight bold)))))

; *** Custom faces ***

(defface punctuation-face '(
    (((type graphic)) :foreground "#4a8bcb")
    (default :foreground "blue")
  ) 
  "Face for highlighting punctuation."
)
(defface number-face '(
    (((type graphic)) :foreground "#77aadd")
    (default :foreground "lightblue")
  )
  "Face for highlighting numers."
)

; *** Helper functions ***

(defun duplicate-line ()
  "duplicate current line" 
  (interactive) (save-excursion (let ((line-text 
  (buffer-substring-no-properties (line-beginning-position) (line-end-position)))) 
  (move-end-of-line 1) (newline) (insert line-text))) (next-line)
)
(defun toggle-comment-on-line () 
  "comment or uncomment current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position))
)
(defun delete-line ()
  "delete current line without writing to kill ring"
  (interactive)
  (delete-region (line-beginning-position) (line-end-position))
)
(defun reload-config () 
  "reload init file" 
  (interactive) 
  (load-file "~/.emacs")
)
(defun make () (interactive) "build with make" (compile "make"))
(defun ispell-no-checking-strings () 
  "disable spellchecking with ispell inside double quotes"
  (interactive) 
  (add-to-list 'ispell-skip-region-alist '("\".*\""))
)
(defun ispell-comments ()
  "modified ispell-comments-and-strings which only checks comments"
  (interactive)
  (goto-char (point-min))
  (let (state done)
    (while (not done)
      (setq done t)
      (setq state (parse-partial-sexp (point) (point-max)
				      nil nil state 1))
      (if (nth 4 state)
	  (let ((start (point)))
	    (setq state (parse-partial-sexp start (point-max)
					    nil nil state 'syntax-table))
	  (if (nth 4 state)
 		(error "Unterminated comment"))
	    (save-excursion
	      (setq done (not (ispell-region start (point))))))))))
(defun toggle-mode-line () 
  "toggle displaying of mode line"
  (interactive) 
  (setq mode-line-format
    (if (equal mode-line-format nil)
      (default-value 'mode-line-format)
    ) 
  )
  (redraw-display)
)

; *** Keyboard shortcuts ***

(global-set-key (kbd "C-k") 'kill-whole-line)
(global-set-key (kbd "C-d") 'duplicate-line)
(global-set-key (kbd "M-;") 'toggle-comment-on-line)
(global-set-key (kbd "M-k") 'delete-line)
(global-set-key (kbd "S-<f5>") 'make)
(global-set-key (kbd "<f5>") 'compile)

; *** Custom highlighting ***

(defun highlight-pun () 
 (interactive)
 (font-lock-add-keywords nil '(("[]\[()<>:#&*=+^%!~,.?;/-]" 0 'punctuation-face)) 1)
)

(defun highlight-num () 
 (font-lock-add-keywords nil '(("0[xX][a-fA-F0-9]+" 0 'number-face)) 1) ; hexadecimal
 ;(font-lock-add-keywords nil '(("[^0-9]\\(0[0-7]+\\)" 1 'number-face)) 1) ; octal
 ;(font-lock-add-keywords nil '(("[^0-9]\\([\-+]*[0-9]+\\)" 1 'number-face)) 1) ; decimal
 (font-lock-add-keywords nil '(("[\-+]?[0-9]*\\.?[0-9]+\\([eE][\-+]?[0-9]+\\)?[fF]?" 0 'number-face)) 1) ; floating point, integer (dec, oct)
)

(add-hook 'prog-mode-hook 'highlight-pun)
(add-hook 'text-mode-hook 'highlight-pun)
(add-hook 'prog-mode-hook 'highlight-num)

; *** Misc configuration ***

; Auto save and backup files dir.
(setq temporary-file-directory "~/.emacs.d/tmp/")
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

; Disable backup and auto-save.
;(setq backup-inhibited t)
;(setq auto-save-default nil)

; Hide menubar, toolbar and scrollbar.
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
; Enable linum and curent line highlight by default.
(global-linum-mode)
(global-hl-line-mode)
; Enable mouse in xterm-compatible terminals.
(xterm-mouse-mode 1)
; Disable cursor blinking.
(blink-cursor-mode 0)
; Enable showing matching parenthesses.
(show-paren-mode t)
; Set default cursor appearance to a hollow box.
(setq default-cursor-type 'hollow)
; Disable showing welcome screen.
(setq inhibit-splash-screen t)
; Default frame size.
(add-to-list 'default-frame-alist '(height . 30))
(add-to-list 'default-frame-alist '(width . 100))
; Make python2 shebang trigger python-mode.
(add-to-list 'interpreter-mode-alist '("python2" . python-mode))
; Set default tab width.
(setq-default tab-width 4)
; Set indentation offset in C mode to same as tab width.
(defvaralias 'c-basic-offset 'tab-width)
; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)
; Indent size in python.
(setq-default python-indent-offset tab-width)
; Set the default ispell dict to english.
(setq-default  ispell-local-dictionary "en_US")
; Make ediff control window be part of the main one.
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
; Always scroll one line at time.
;(setq scroll-step            1
;      scroll-conservatively  10000)
; Change the line number format.
; (setq linum-format "%4d ")
; Wrap lines without splitting off words
(setq-default word-wrap t)

; *** Modeline rice ***

; Display column number.
(column-number-mode)
; Display function name.
(which-function-mode)
; Set time display fromat to 24-hour
;(setq display-time-24hr-format t)
; Display time and system load.
;(display-time-mode)
; Display percentage of battery charge left.
;(display-battery-mode)

; *** Addons ***

; Set addons path.
; Note: this stuff's mostly copy-pasted from documentation of relevant addons.
(add-to-list 'load-path "~/.emacs.d/addons")

; Auto-complete
; http://cx4a.org/software/auto-complete/
; https://github.com/auto-complete/auto-complete
(add-to-list 'load-path "~/.emacs.d/addons/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/addons/auto-complete/ac-dict")
(ac-config-default)
(setq ac-quick-help-delay 0.3)
(setq ac-menu-height 10)
(setq ac-auto-start nil)
(define-key ac-mode-map (kbd "C-SPC") 'auto-complete)
(add-hook 'css-mode-hook (lambda () (setq ac-sources (append '(ac-source-css-property) ac-sources))))

; Clang auto-complete
; https://github.com/brianjcj/auto-complete-clang
(require 'auto-complete-clang)
;(setq clang-completion-suppress-error 't)
(setq ac-clang-flags
      (mapcar (lambda (item)(concat "-I" item))
              (split-string 
"/usr/lib/gcc/x86_64-unknown-linux-gnu/4.8.2/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/4.8.2/include-fixed
 /usr/include" )))
(add-to-list 'ac-clang-flags "-code-completion-macros")
(add-to-list 'ac-clang-flags "-code-completion-patterns")
(add-hook 'c-mode-common-hook (lambda () (setq ac-sources 
  '(ac-source-clang ac-source-yasnippet ac-source-gtags ac-source-abbrev 
    ac-source-dictionary))))
;(add-hook 'c-mode-common-hook (lambda () 
;  (add-to-list 'ac-sources 'ac-source-clang)))

; Yasnippet
; https://github.com/capitaomorte/yasnippet
(add-to-list 'load-path "~/.emacs.d/addons/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)

; GLSL mode
; https://github.com/jimhourihan/glsl-mode
(autoload 'glsl-mode "glsl-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode))
(add-hook 'glsl-mode-hook 'auto-complete-mode)

; CUDA mode
; http://www.emacswiki.org/emacs/CudaMode
(require 'cuda-mode)

; PKGBUILD mode
(autoload 'pkgbuild-mode "pkgbuild-mode.el" "PKGBUILD mode." t)
(add-to-list 'auto-mode-alist '("/PKGBUILD$" . pkgbuild-mode))

; Markdown mode
; http://jblevins.org/projects/markdown-mode/markdown-mode.el
(autoload 'markdown-mode "markdown-mode.el"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-hook 'markdown-mode-hook 'flyspell-mode)

; D mode
; https://github.com/Emacs-D-Mode-Maintainers/Emacs-D-Mode
(autoload 'd-mode "d-mode" "Major mode for editing D code." t)
(add-to-list 'auto-mode-alist '("\\.d[i]?\\'" . d-mode))

; Gram and drag
; http://www.emacswiki.org/emacs/download/grab-and-drag.el
(require 'grab-and-drag)
;(grab-and-drag-mode 1)
(setq grab-and-drag-timeout 0.2)

; El-Get
; https://github.com/dimitri/el-get
;(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
;(unless (require 'el-get nil 'noerror)
  ;(with-current-buffer
      ;(url-retrieve-synchronously
       ;"https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    ;(let (el-get-master-branch)
      ;(goto-char (point-max))
      ;(eval-print-last-sexp))))
;(el-get 'sync)

; Jedi (python auto-compeltion) 
; https://github.com/davidhalter/jedi
;(add-to-list 'load-path "~/.emacs.d/addons/jedi")
;(setq jedi:setup-keys t)
 ;; autocomplete here (ctrl+space)
;(setq jedi:key-complete (kbd "C-@"))
;(require 'jedi)
 ;; (autoload 'jedi:setup "jedi" nil t)
;(add-hook 'python-mode-hook 'jedi:setup)
 ;; fix python2 path
 ;; (setq jedi:server-command (list "/usr/bin/python2" "~/.emacs.d/addons/jedi/jediepcserver.py"))
;(setq jedi:server-command (list "/usr/bin/python2" jedi:server-script))
